rule ldsc_trait_chunk:
    input:
        evdf=expand(config["EVD_DIR"]+"{{pop_a}}/{{pop_b}}/chr{chrom}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}.h5",chrom=genome_chr)
    output:
        outf =expand(config["LDSC_LD"]+"{{pop_a}}_{{pop_b}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_chr{chri}/{chrom}.l2.ldscore.gz",chri=chrom_int,chrom=range(1,23)),
        soutf=expand(config["LDSC_LD"]+"{{pop_a}}_{{pop_b}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_chr{chri}/{chrom}.l2.M_5_50",chri=chrom_int,chrom=range(1,23))
    script:
        "../scripts/ldsc_trait_chunk.R"        

        
rule prep_ldsc_uh:
    input:
        rdsf=expand(config["KG_DIRECTORY"]+"gwas_uh/chr{chrom}_{{pop_a}}_{{pop_b}}_{{scenario}}_{{ncovar}}_sim.h5",chrom=genome_chr)
    params:
        fgeneid=FGENEID[SCEN]
    output:
        ldscf=temp(expand(config["KG_DIRECTORY"]+"ldsc_sim_gwas_genome/chr{chri}_{{pop_a}}_{{pop_b}}_sim_{fgeneid}_uh_{{scenario}}_{{ncovar}}.txt",fgeneid=FGENEID[SCEN],chri=chrom_int))
    script:
        "../scripts/prep_ldsc_uh.R"

        
rule ldsc_trait_est_int:
    input:
        ldsc_f="ldsc/ldsc.py",
        sumstatf=config["KG_DIRECTORY"]+"ldsc_sim_gwas_genome/chr{chri}_{{pop_a}}_{{pop_b}}_sim_{{fgeneid}}_uh_{{scenario}}_{{ncovar}}.txt".format(chri=chrom_int),
        chroml2=expand(config["LDSC_LD"]+"{{pop_a}}_{{pop_b}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_chr{chri}/{chrom}.l2.ldscore.gz",chri=chrom_int,chrom=range(1,23))
    params:
        out_pref=config["KG_DIRECTORY"]+"ldsc_est_gwas_genome/est_chr{chri}_{{pop_a}}_{{pop_b}}_{{scenario}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_sim_{{fgeneid}}_{{ncovar}}_T".format(chri=chrom_int),
        ld_dir=config["LDSC_LD"]+"{{pop_a}}_{{pop_b}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_chr{chri}/".format(chri=chrom_int)
    output:
        logf=temp(config["KG_DIRECTORY"]+"ldsc_est_gwas_genome/est_chr{chri}_{{pop_a}}_{{pop_b}}_{{scenario}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_sim_{{fgeneid}}_{{ncovar}}_T.log".format(chri=chrom_int))
    conda:
        "envs/ldsc.yml"
    shell:
        "python2 ./ldsc/ldsc.py --h2 {input.sumstatf}  --ref-ld-chr {params.ld_dir} --w-ld-chr {params.ld_dir} --out {params.out_pref} "


rule ldsc_trait_est_noint:
    input:
        ldsc_f="ldsc/ldsc.py",
        sumstatf=config["KG_DIRECTORY"]+"ldsc_sim_gwas_genome/chr{chri}_{{pop_a}}_{{pop_b}}_sim_{{fgeneid}}_uh_{{scenario}}_{{ncovar}}.txt".format(chri=chrom_int),
        chroml2=expand(config["LDSC_LD"]+"{{pop_a}}_{{pop_b}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_chr{chri}/{chrom}.l2.ldscore.gz",chri=chrom_int,chrom=genome_chr)
    params:
        out_pref=config["KG_DIRECTORY"]+"ldsc_est_gwas_genome/est_chr{chri}_{{pop_a}}_{{pop_b}}_{{scenario}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_sim_{{fgeneid}}_{{ncovar}}_F".format(chri=chrom_int),
        ld_dir=config["LDSC_LD"]+"{{pop_a}}_{{pop_b}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_chr{chri}/".format(chri=chrom_int)
    output:
        logf=temp(config["KG_DIRECTORY"]+"ldsc_est_gwas_genome/est_chr{chri}_{{pop_a}}_{{pop_b}}_{{scenario}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_sim_{{fgeneid}}_{{ncovar}}_F.log".format(chri=chrom_int))
    conda:
        "envs/ldsc.yml"

    shell:
        "python2 ./ldsc/ldsc.py --h2 {input.sumstatf}  --no-intercept --ref-ld-chr {params.ld_dir} --w-ld-chr {params.ld_dir} --out {params.out_pref} "


rule ldsc_trait_parse:
    input:
        logf=expand(config["KG_DIRECTORY"]+"ldsc_est_gwas_genome/est_chr{chri}_{{pop_a}}_{{pop_b}}_{{scenario}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_sim_{fgeneid}_{{ncovar}}_{{useIntercept}}.log",chri=chrom_int,fgeneid=FGENEID[SCEN]),
        true_f=config["KG_DIRECTORY"]+"gwas_uh/chr{chrom}_{{pop_a}}_{{pop_b}}_{{scenario}}_{{ncovar}}_sim.h5".format(chrom=list(genome_chr)[0])
    output:
        logf=config["OUTPUT_DIR"]+"ldsc_res/est_chr{chri}_{{pop_a}}_{{pop_b}}_{{scenario}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_sim_{{ncovar}}_{{useIntercept}}.txt.gz".format(chri=chrom_int)
    params:
        fgeneid=expand("{fgeneid}",fgeneid=FGENEID[SCEN])
    script:
        "../scripts/parse_ldsc.R"                
                
        

rule get_ldsc:
    output:
        "ldsc/ldsc.py"
    shell:
        "git clone https://github.com/bulik/ldsc.git"
                      

