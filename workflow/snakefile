import os
import yaml
from yaml import Loader
from typing import Any,IO


def host_loader(loader: yaml.loader.Loader,node: yaml.Node) -> Any:
      fields = loader.construct_mapping(node,deep=True)
      options=fields['options']
      # print([options[name] for name in options.keys()])
      ret_opt = [name for name in options.keys() if os.path.exists(options[name])]
      # print(ret_opt)
      return ret_opt[0]


def dep_loader(loader: yaml.loader.Loader,node: yaml.Node) -> Any:
      options = loader.construct_mapping(node,deep=True)
      host = options['host']
      pref = options['pref']
      # print(pref)
      host =options['host']
      path = options['path']
      full_path = pref+path[host] if pref is not None else path[host]
      return full_path



yaml.Loader.add_constructor('!Host', host_loader)
yaml.Loader.add_constructor('!Dep', dep_loader)



with open("../workflow/config_base.yaml") as stream:
      config=yaml.load(stream)

config_d = config['paths']
config_e = config['envs']


with open("annots.yaml", 'r') as stream:
    all_annot = yaml.safe_load(stream)
    #(all_annot)
wildcard_constraints:
    chrom="\d+"

localrules: all, get_hm3_snplist,get_plinkfiles,get_frq,get_weights


include: "dl_snakefile"
include: "gwas_snakefile"
rule all:
    input:
        config_d['GWAS'] +"ldsc_input/ptb_gwas.sumstats.gz",
        "reproducible.results"
