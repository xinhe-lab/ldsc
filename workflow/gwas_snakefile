rule gwas_h52torus:
    input:
        inputf=config_d['GWAS'] +"{gwas}_gwas.h5",
        snplist = expand(config_d['1KG'] +"1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bim",chrom=range(1,23))
    output:
        outputf=config_d['GWAS'] +"{gwas}_torus.txt.gz"
    conda:
        config_e['r']
    script:
        "../scripts/gen_torus_sumstats.R"

def get_annot_torus_files(wildcards):

    wca = wildcards.anno_name
    if wca != 'null':
        annok = all_annot['ptb_torus_model'].get(wca)
        ret_dict = {
            'annot_f' : anno_files(annok),
            'bimf': expand(config_d['1KG'] +"1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bim",chrom=range(1,23))
        }
    else:
        annok = all_annot['ptb_torus_model'].get(wca)
        ret_dict = {
            'bimf': expand(config_d['1KG'] +"1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bim",chrom=range(1,23))
        }
    return ret_dict

rule anno2torus:
    input:
        unpack(get_annot_torus_files)
    output:
        outputf=config_d['ANNO'] +"{anno_name}.txt.gz"
    params:
        chroms=range(1,22),
        annot=lambda wildcards: expand("{anno_name}",anno_name=all_annot['ptb_torus_model'][wildcards.anno_name]) if wildcards.anno_name != "null" else None
    conda:
        config_e['r']
    script:
        "../scripts/gen_torus_anno.R"

rule anno2torus_fdr:
    input:
        gwasf=config_d['GWAS'] +"{gwas}_torus.txt.gz",
        annof=config_d['ANNO'] +"{anno_name}.txt.gz"
    output:
        outputf="torus_{gwas}_{anno_name}_fdr.RDS"
    conda:
        config_e['r']
    script:
        "../scripts/run_torus_fdr.R"


rule torus_fdrf:
    input:
        fdrf="torus_{gwas}_{anno_name}_fdr.RDS"
    params:
        fdrc=0.1
    output:
        off="torus_{gwas}_{anno_name}_fdr.tsv"
    script:
        "../scripts/filter_torus_p.R"


rule ldmap_bk:
    input:
        bimlist = config_d['1KG'] +"1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bim",
        bedlist = config_d['1KG'] +"1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bed"
    output:
        h5 = config_d['1KG'] +"1000G_EUR_Phase3_plink/h5/1000G.EUR.QC.{chrom}.h5"
    script:
        "../scripts/ldmap_h5.R"

rule ldmap_gwas:
    input:
        inputf=config_d['GWAS'] +"{gwas}_gwas.h5"
    output:
        offsetf=config_d['GWAS'] +"{gwas}_gwas_ldetect.RDS"
    script:
       "../scripts/ldmap_gwas.R"

def ldmap_rf(wildcards):
    rchrom = ldetect_data[int(wildcards.region_id)]['chrom']
    return config_d['1KG'] +f"1000G_EUR_Phase3_plink/h5/1000G.EUR.QC.{rchrom}.h5"


rule ldmap_ld:
    input:
        ldmap_rf
    params:
        region="{region_id}"
    output:
        ldf = config_d['1KG'] +"1000G_EUR_Phase3_plink/LD/{chrom}_{region_id}.h5"
    script:
        "../scripts/ldmap_ld.R"


checkpoint anno2torusp:
    input:
        gwasf=config_d['GWAS'] +"{gwas}_torus.txt.gz",
        annof=config_d['ANNO'] +"{anno_name}.txt.gz",
        prior_r="torus_{gwas}_{anno_name}_fdr.tsv"
    output:
        outputf="torus_{gwas}_{anno_name}_mv.RDS",
        outputd=directory(config_d['ANNO'] +"torus_{gwas}_{anno_name}")
    conda:
        config_e['r']
    script:
        "../scripts/run_torus_p.R"


# checkpoint anno2torusN:
#     input:
#         gwasf=config_d['GWAS'] +"ptb_torus.txt.gz",
#         prior_r="torus_ptb_allhic_fdr.tsv"
#     output:
#         outputf="torus_ptb_mv.RDS",
#         outputd=directory(config_d['ANNO'] +"torus_ptb")
#     conda:
#         config_e['r']
#     script:
#         "../scripts/run_torus_p.R"

def susie_p_files(wildcards):
    print(wildcards)
    print(wildcards.region_id)
    rchrom = ldetect_data[int(wildcards.region_id)-1]['chrom']
    region_id = wildcards.region_id
    gwas = wildcards.gwas
    anno_name = wildcards.anno_name
    print(wildcards)
    ldf = config_d['1KG'] +f"1000G_EUR_Phase3_plink/LD/{rchrom}_{region_id}.h5",
    ldgf=config_d['GWAS']+ f"{gwas}_gwas_ldetect.RDS",
    priorf=config_d['ANNO'] +f"torus_{gwas}_{anno_name}/{region_id}.RDS",
    inputf=config_d['GWAS'] +f"{gwas}_gwas.h5"
    ret_dict = {
        'ldf': ldf,
        'ldgf': ldgf,
        'priorf': priorf,
        'inputf':inputf
    }
    return ret_dict


rule susie_p:
    input:
        unpack(susie_p_files)
    params:
        region_id="{region_id}"
    output:
        outputf=config_d['FINEMAP']+"torus_{gwas}_{anno_name}/{region_id}.RDS"
    script:
        "../scripts/susie_r.R"



def susie_pn_files(wildcards):
      rchrom = ldetect_data[int(wildcards.region_id)-1]['chrom']
      region_id = wildcards.region_id
      gwas = "ptb"
      print(wildcards)
      ldf = config_d['1KG'] +f"1000G_EUR_Phase3_plink/LD/{rchrom}_{region_id}.h5",
      ldgf=config_d['GWAS']+ f"{gwas}_gwas_ldetect.RDS",
      priorf=config_d['ANNO'] +f"torus_{gwas}/{region_id}.RDS",
      inputf=config_d['GWAS'] +f"{gwas}_gwas.h5"
      ret_dict = {
            'ldf': ldf,
            'ldgf': ldgf,
            'priorf': priorf,
            'inputf':inputf
      }
      return ret_dict


rule susie_pn:
    input:
        unpack(susie_pn_files)
    params:
        region_id="{region_id}"
    output:
        outputf=config_d['FINEMAP']+"torus_ptb/{region_id}.RDS"
    script:
        "../scripts/susie_r.R"



def aggregate_input(wildcards):
    checkpoint_output = checkpoints.anno2torusp.get(**wildcards).output['outputd']
    print("cpo:"+checkpoint_output)
    return expand(config_d['FINEMAP']+"torus_{gwas}_{anno_name}/{i}.RDS",
                  gwas=wildcards.gwas,
                  anno_name=wildcards.anno_name,
                  i=glob_wildcards(os.path.join(checkpoint_output, "{i}.RDS")).i)

def aggregate_inputN(wildcards):
    checkpoint_output = checkpoints.anno2torusN.get(**wildcards).output['outputd']
    print("cpo:"+checkpoint_output)
    return expand(config_d['FINEMAP']+"torus_ptb/{i}.RDS",
                  i=glob_wildcards(os.path.join(checkpoint_output, "{i}.RDS")).i)

rule comb_susie:
      input:
          aggregate_input
      output:
          outputf="aggregated/{gwas}_{anno_name}.RDS"
      script:
          "../scripts/agg_susie.R"


rule comb_susieN:
      input:
          aggregate_inputN
      output:
          outputf="aggregated/ptbNULL.RDS"
      script:
          "../scripts/agg_susie.R"
