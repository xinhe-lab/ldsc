rule get_gest_dur_gwas:
    output:
        temp(config_d['GWAS']+"Fetal_gest_duration_NComms2019.txt.gz")
    shell:
        "wget http://mccarthy.well.ox.ac.uk/publications/2019/EggGestationalDuration_NatureCommunications/Fetal_gest_duration_NComms2019.txt.gz"


rule get_hm3_snplist:
    output:
        temp(config_d['DL'] +"hapmap3_snps.tgz")
    shell:
        "wget https://data.broadinstitute.org/alkesgroup/LDSCORE/hapmap3_snps.tgz -O {output}"

rule gunzip_hm3:
    input:
        rules.get_hm3_snplist.output
    params:
        dld=config_d['1KG']
    output:
        expand(config_d['1KG']+"hapmap3_snps/"+"hm.{chrom}.snp",chrom=range(1,23))
    shell:
        "tar -C {params.dld} -xvzf {input}"

# rule snp2coord:
#     input:
#         inputf=config_d['1KG']+"hapmap3_snps/"+"hm.{chrom}.snp"
#     output:
#         outputf=config_d['1KG']+"hapmap3_snps/"+"hm.{chrom}.tsv.gz"
#     script:
#         "../scripts/rsid2loc.R"

rule get_cadd:
    output:
        temp(config_d["DL"]+"whole_genome_SNVs_inclAnno.tsv.gz")
    shell:
        "wget https://krishna.gs.washington.edu/download/CADD/v1.4/GRCh37/whole_genome_SNVs_inclAnno.tsv.gz -O {output}"

rule get_spidex:
    output:
        temp(config_d["DL"]+"hg19_spidex.zip")
    shell:
        "wget http://www.openbioinformatics.org/annovar/download/IlvUMvrpPT/hg19_spidex.zip -O {output}"
rule get_baseline_model:
    output:
        temp(config_d['DL']+"1000G_Phase3_baselineLD_v2.2_ldscores.tgz")
    shell:
        "wget https://data.broadinstitute.org/alkesgroup/LDSCORE/1000G_Phase3_baselineLD_v2.2_ldscores.tgz -O {output}"

rule get_weights:
    output:
        temp(config_d["DL"]+"1000G_Phase3_weights_hm3_no_MHC.tgz")
    shell:
        "wget https://data.broadinstitute.org/alkesgroup/LDSCORE/1000G_Phase3_weights_hm3_no_MHC.tgz -O {output}"

rule gunzip_weights:
    input:
        config_d["DL"]+"1000G_Phase3_weights_hm3_no_MHC.tgz"
    output:
        ldfiles = expand(config_d['WEIGHTS'] +"weights.hm3_noMHC.{chrom}.l2.ldscore.gz",chrom=range(1,23))
    params:
        W=config_d['1KG']
    shell:
        "tar -xvzf {input} -C {params.W}"        

rule get_frq:
    output:
        temp(config_d['DL']+"1000G_Phase3_frq.tgz")
    shell:
        "wget https://data.broadinstitute.org/alkesgroup/LDSCORE/1000G_Phase3_frq.tgz -O {output}"


rule get_plinkfiles:
    output:
        temp(config_d['DL'] +"1000G_Phase3_plinkfiles.tgz")
    shell:
        "wget https://data.broadinstitute.org/alkesgroup/LDSCORE/1000G_Phase3_plinkfiles.tgz -O {output}"

rule gunzip_plinkfiles:
    input:
        config_d['DL'] +"1000G_Phase3_plinkfiles.tgz"
    output:
        fam_files = expand(config_d['1KG'] +"1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.fam",chrom=range(1,23)),
        bim_files = expand(config_d['1KG'] +"1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bim",chrom=range(1,23)),
        bed_files = expand(config_d['1KG'] +"1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bed",chrom=range(1,23))
    params:
        KG=config_d['1KG']
    shell:
        "tar -xvzf {input} -C {params.KG}"

rule gunzip_frqf:
    input:
        config_d['DL'] +"1000G_Phase3_frq.tgz"
    output:
        fam_files = expand(config_d['FRQF'] +"1000G.EUR.QC.{chrom}.frq",chrom=range(1,23)),
    params:
        KG=config_d['1KG']
    shell:
        "tar -xvzf {input} -C {params.KG}"


rule gunzip_baseline:
    input:
        config_d['DL'] +"1000G_Phase3_baselineLD_v2.2_ldscores.tgz"
    output:
        ldfiles = expand(config_d['L2'] +"baseline/baselineLD.{chrom}.l2.ldscore.gz",chrom=range(1,23)),
        annotf = expand(config_d['L2'] +"baseline/baselineLD.{chrom}.annot.gz",chrom=range(1,23)),
        m50 = expand(config_d['L2'] +"baseline/baselineLD.{chrom}.l2.M_5_50",chrom=range(1,23))
    params:
        L2=config_d['L2']
    shell:
        "tar -xvzf {input} -C {params.L2}/baseline"



rule unzip_annot:
    input:
        config_d['BED'] + "{annot}.bed.gz"
    output:
        temp(config_d['BED'] + "{annot}.bed")
    wildcard_constraints:
        annot="[^/]+"
    shell:
        "gzip -cd {input} > {output}"


rule make_annot:
    input:
        anno_bed=config_d['BED'] +"{annot}.bed",
        bim=config_d['1KG'] + "1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bim"
    output:
        annot = config_d['L2'] +"{annot}.{chrom}.annot.gz"
    params:
        anno_name='{annot}'
    conda:
        config_e['ldsc']
    shell:
        "python2 ../make_annot.py --bed-file {input.anno_bed} --bimfile {input.bim} --annot-file {output.annot} --annot-name {params.anno_name}"

rule pull_rsid:
    input:
        config_d["L2"]+"baseline/baselineLD.{chrom}.l2.ldscore.gz"
    output:
        temp(config_d["L2"]+"snplist/{chrom}.snplist.txt")
    shell:
        "zcat {input} | cut -f 2 | tail -n +2 > {output}"



rule cmp_ldscores:
    input:
        anno_bed=config_d['L2'] +"{annot}.{chrom}.annot.gz",
        snplistf=config_d["L2"]+"snplist/{chrom}.snplist.txt",
        bim=config_d['1KG'] + "1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bim",
        bed=config_d['1KG'] + "1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bed",
        fam=config_d['1KG'] + "1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.fam"
    output:
        l2=config_d['L2']+"{annot}.{chrom}.l2.M",
        l2M_50=config_d['L2']+"{annot}.{chrom}.l2.M_5_50",
        l2gz=config_d['L2']+"{annot}.{chrom}.l2.ldscore.gz"
    params:
        plink=config_d['1KG'] + "1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}",
        odir=config_d['L2']+"{annot}.{chrom}"
    # wildcard_constraints:
    #     annot="[^/]"
    conda:
        config_e['ldsc']
    shell:
        "python2 ../ldsc.py --l2 --bfile {params.plink} --print-snps {input.snplistf} --ld-wind-cm 1 --thin-annot --annot {input.anno_bed} --out {params.odir} "

# rule cmp_ldscores_baseline:
#     input:
#         anno_bed=config_d['L2'] +"baseline/baselineLD.{chrom}.annot.gz",
#         bim=config_d['1KG'] + "1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bim",
#         bed=config_d['1KG'] + "1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.bed",
#         fam=config_d['1KG'] + "1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}.fam"
#     output:
#         l2=config_d['L2']+"baselineLD/{annot}.{chrom}.l2.M",
#         l2M_50=config_d['L2']+"baselineLD/{annot}.{chrom}.l2.M_5_50",
#         l2gz=config_d['L2']+"baselineLD/{annot}.{chrom}.l2.ldscore.gz"
#     params:
#         plink=config_d['1KG'] + "1000G_EUR_Phase3_plink/1000G.EUR.QC.{chrom}",
#         odir=config_d['L2']+"baselineLD/{annot}.{chrom}"
#     conda:
#         config_e['ldsc']
#     shell:
#         "python2 ../ldsc.py --l2 --bfile {params.plink} --ld-wind-cm 1 --annot {input.anno_bed}  --out {params.odir} "

# def ldsc_fun(wildcards):
#     {tchrom: expand(config_d['L2'] +"{anno_name}.{chrom}.l2.ldscore.gz",chrom=[tchrom],anno_name=['baseline' *all_annot[wildcards.anno_name]]) for tchrom in range(1,23)}

# rule check_ldsc:
#     input:
#         unpack(ldsc_fun)
#     output:
#         temp("{anno_name}.check")
#     script:
#         "../scripts/check_ldscfiles.R"

def new_get_annot_files(wildcards):
    return {'anno_l2':expand(config_d['L2'] +"{annot}.{chrom}.l2.ldscore.gz",chrom=range(1,23),annot=all_annot['ptb_model'][wildcards.anno_name]),
            'baseline_l2':expand(config_d['L2'] +"baseline/baselineLD.{chrom}.l2.ldscore.gz",chrom=range(1,23)),
            'gwasf':config_d['GWAS'] +"ldsc_input/ptb_gwas.sumstats.gz",
            'baselinef':  expand(config_d['WEIGHTS'] +"weights.hm3_noMHC.{chrom}.l2.ldscore.gz",chrom=range(1,23)),
            'freqf':  expand(config_d['FRQF'] +"1000G.EUR.QC.{chrom}.frq",chrom=range(1,23)),
    }



def get_merge_annot_files(wildcards):
    return {'anno_l2':expand(config_d['L2'] +"{annot}.{chrom}.l2.ldscore.gz",chrom=range(1,23),annot=all_annot['ptb_model'][wildcards.anno_name]),
            'annof':expand(config_d['L2'] +"{annot}.{chrom}.annot.gz",chrom=range(1,23),annot=all_annot['ptb_model'][wildcards.anno_name]),
            'baseline_l2':expand(config_d['L2'] +"baseline/baselineLD.{chrom}.l2.ldscore.gz",chrom=range(1,23))
      }

rule merge_ldsc:
    input:
        unpack(get_merge_annot_files)   
    output:
        dataf=expand(config_d["L2"]+"new_baseline/{{anno_name}}.{chrom}.l2.ldscore.gz",chrom=range(1,23))
    params:
        L2=config_d['L2'],
        baseline_features=all_annot['baseline_model'],
        features=lambda wildcards: all_annot['ptb_model'][wildcards.anno_name],
        annot_name="{anno_name}"
    script:
        "../scripts/check_ldscfiles.R"

rule run_ldsc:
    input:
        anno_ld=expand(config_d["L2"]+"new_baseline/{{anno_name}}.{chrom}.l2.ldscore.gz",chrom=range(1,23)),
        baselinef=  expand(config_d['WEIGHTS'] +"weights.hm3_noMHC.{chrom}.l2.ldscore.gz",chrom=range(1,23)),
        gwasf=config_d['GWAS'] +"ldsc_input/ptb_gwas.sumstats.gz"
    output:
        dataf="{anno_name}.results"
    log:
        tempf=temp("{anno_name}.log")
    params:
        annot=config_d["L2"]+"new_baseline/{anno_name}",
        weights=config_d['WEIGHTS']+"weights.hm3_noMHC.",
        frq=config_d['FRQF'] +"1000G.EUR.QC.",
        odir="{anno_name}"
    conda:
        config_e['ldsc']
    shell:
        """python2 ../ldsc.py --h2 {input.gwasf} --ref-ld-chr {params.annot} --w-ld-chr {params.weights} --overlap-annot --frqfile-chr {params.frq} --out {params.odir} """
